#!/usr/local/bin/yog

from optparse import OptionParser

class BackupError > Exception
end

class Client
  def init(cmd, root, src)
    self.cmd = cmd
    self.root = root.to_path().abs()
    self.src = src.map() do [dir]
      next dir.to_path().abs()
    end

    self.in = nil
    self.out = nil
  end

  def send(line)
    self.out.write(line + "\r\n")
    self.out.flush()
  end

  def read_char()
    if (c = self.in.read(1)) != "\r"
      return c
    end
    self.in.read(1)
    return "\n"
  end

  def readline()
    line = ""
    while !self.in.eof? && ((c = self.read_char()) != "\n")
      line << c
    end
    return line
  end

  def recv_ok()
    params = self.readline().split(max: 1)
    if params[0] == "OK"
      return
    end
    raise BackupError.new(params[1])
  end

  def get_related_path(path)
    return (s = path.slice(self.root.size)) == "" ? "/" : s
  end

  def send_dir(path)
    s = self.get_related_path(path)
    if s == "/"
      return
    end
    st = path.lstat()
    cmd = "DIR {0} {1} {2} {3}".format(s.inspect(), st.mode, st.uid, st.gid)
    self.send(cmd)
    self.recv_ok()
  end

  def send_symlink(path)
    # TODO
  end

  def send_body(path)
    # TODO
    self.send("BODY 0")
    self.recv_ok()
  end

  def send_file(path)
    fmt = "FILE {0} {1} {2} {3} {4}"
    s = self.get_related_path(path)
    st = path.lstat()
    self.send(fmt.format(s.inspect(), st.mode, st.uid, st.gid, nil))
    resp = self.readline()
    if resp != "CHANGED"
      return
    end
    self.send_body(path)
  end

  def backup_parent(dir)
    if dir == self.root
      return
    end
    self.backup_parent(dir.dirname)
    self.send_dir(dir)
  end

  def backup_tree(dir)
    self.backup_parent(dir)
    dir.walk() do [path]
      if path.dir?
        self.send_dir(path)
        next
      end
      (:
      if path.symlink?
        self.send_symlink(path)
        next
      end
      :)
      self.send_file(path)
    end
  end

  def protocol_main()
    self.src.each() do [dir]
      self.backup_tree(dir)
    end
    #self.send("DIR foo 644 1001 1001")
    #self.readline()
  end

  def run()
    proc = Process.new(["/bin/sh", "-c", self.cmd]).run()
    try
      self.in = proc.stdout
      self.out = proc.stdin
      self.protocol_main()
    finally
      self.in.close()
      self.out.close()
      proc.wait()
    end
  end
end

def parse_options(argv)
  opt_parser = OptionParser.new()

  cmd = "ssh windsor yog ~/projects/UnnamedBackupTool/ubts.yog"
  opt_parser.on_option(nil, "command") do [val]
    cmd = val
  end

  root = "/"
  opt_parser.on_option(nil, "root") do [val]
    root = val
  end

  args = opt_parser.parse(argv)
  return cmd, root, args
end

def main(argv)
  cmd, root, args = parse_options(argv)
  Client.new(cmd, root, args).run()
end

if __FILE__ == ARGV.get(0)
  main(ARGV.slice(1))
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
